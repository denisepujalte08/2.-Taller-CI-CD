name: Python CI

on:
  push:
    branches: [ main ] #esto es lo qe se va a ejecutar cuando se haga un push en la rama 'main'
        #y solo esta rama
  pull_request:
    branches: [ main ]

jobs: #estos son los flujos de trabajos
  ci-checks:
    name: Build
    runs-on: ubuntu-latest

    steps: #ACA VAN TODOS LOS PASOS A EJECUTARSE
      - name: Checkout del código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependencias
        run: |
          pip install -r requirements.txt

#esto lo que hace es revisar los errores simples del codigo
  #PEP 8: cantidad de caracteres, lineas, etc
  # errores de programación comunes: variables no usadas, imports, etc
  # también mide la complejidad del codigo
      - name: Revisar estilo con Flake8
        run: |
          flake8 . --max-line-length=88 > flake8.log

      - name: Notificar error Flake8 en Slack
        if: failure()
        run: |
          ERROR_MSG=$(head -20 flake8.log | sed ':a;N;$!ba;s/\n/\\n/g')
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"❌ Falló Flake8:\n\`\`\`${ERROR_MSG}\`\`\`\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Ejecutar tests con coverage y notificar si fallan
        run: |
          pip install coverage
          set +e
          coverage run -m pytest --tb=short > pytest.log
          STATUS=$?
          set -e

          coverage xml

          if [ "$STATUS" -ne 0 ]; then
            ERROR_MSG=$(grep -A 5 -E 'FAILURES|ERRORS' pytest.log | head -20 | sed ':a;N;$!ba;s/\n/\\n/g')
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"❌ Falló un test en pytest:\n\`\`\`${ERROR_MSG}\`\`\`\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
            exit 1
          else
            echo "✅ Tests pasaron correctamente"
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"✅ Todos los tests pasaron correctamente.\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
            exit 0
          fi

      - name: Generar reporte de cobertura
        run: |
          pip install coverage
          coverage run -m pytest
          coverage xml

      - name: Analizar con SonarCloud
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Notificar error SonarCloud en Slack
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"❌ Falló el análisis de SonarCloud.\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Esperar resultados de Quality Gate
        run: |
          sleep 30  # Espera a que SonarCloud procese el análisis

      - name: Verificar estado de Quality Gate en SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="denisepujalte08_2-Taller-CI-CD"
          for i in {1..10}; do
            STATUS=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" | jq -r .projectStatus.status)
            echo "Intento $i - Quality Gate status: $STATUS"
            if [ "$STATUS" != "null" ]; then
              break
            fi
            sleep 10
          done
          if [ "$STATUS" != "OK" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"❌ Quality Gate fallido en SonarCloud para $PROJECT_KEY. Estado: $STATUS\"}" \
              ${{ secrets.SLACK_WEBHOOK_URL }}
            exit 1
          fi

      - name: Notificar a Slack
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="✅ Build exitosa y lista para deploy"
          else
            MESSAGE="❌ Build fallida. Revisar errores"
          fi

          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"${MESSAGE}\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}


  deploy:
    name: Despliegue en Render
    needs: ci-checks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Despliegue
        run: |
          curl -X POST https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
            -H 'Accept: application/json' \
            -H 'Authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
            -d ''

      - name: Verificar estado del despliegue en Render
        id: check_render
        run: |
          for i in {1..10}; do
            DEPLOY_STATUS=$(curl -s -X GET -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys | jq -r '.[0].deploy.status')

            echo "Intento $i - Estado del despliegue: $DEPLOY_STATUS"

            if [ "$DEPLOY_STATUS" == "live" ] || [ "$DEPLOY_STATUS" == "update_failed" ]; then
              echo "status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT
              exit 0
            fi

            sleep 30
          done

          echo "status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT

      - name: Notificar despliegue exitoso
        if: ${{ steps.check_render.outputs.status == 'live' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ Despliegue exitoso en Render "}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notificar despliegue fallido
        if: ${{ steps.check_render.outputs.status == 'update_failed' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"⚠ El despliegue en Render falló. Revisar el dashboard."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
